#!/bin/bash

function usage()
{

  echo "Usage: $(basename $0) project/job_name"

}



if [ "x$cis_base_dir" = "x" ]
then

  echo ""
  echo "FATAL: the base dir for CI system hasn't defined. Please define it in environment variable \"cis_base_dir\""
  echo "Execution aborted."
  echo ""
  exit 1

fi



if [ "x$session_id" = "x" ]
then

  export session_id="$($cis_base_dir/core/opensession)"

  echo "$session_id"

  export session_opened_by_me=true


  export parent_job_name=""

  export parent_job_build_number=""

else

  export session_opened_by_me=false


  export parent_job_name="$job_name"

  export parent_job_build_number="$build_number"

fi



export job_name="$1"

$cis_base_dir/core/sessionlog "action=try_to_start_job job_name=\"$job_name\""



check_can_start_job=true

if [ "x$job_name" = "x" ]
then

  usage

  $cis_base_dir/core/corelog "action=error_use_startjob_without_job_name" 
  $cis_base_dir/core/sessionlog "action=error_use_startjob_without_job_name" 

  check_can_start_job=false

fi


if [ ! -d "$cis_base_dir/jobs/$job_name" ]
then

  $cis_base_dir/core/corelog "action=error_try_to_start_unexisted_job job_name=\"$job_name\"" 
  $cis_base_dir/core/sessionlog "action=error_try_to_start_unexisted_job job_name=\"$job_name\"" 

  check_can_start_job=false

fi


if [ ! -f "$cis_base_dir/jobs/$job_name/script" ]
then

  $cis_base_dir/core/corelog "action=error_cant_find_script_file job_name=\"$job_name\"" 
  $cis_base_dir/core/sessionlog "action=error_cant_find_script_file job_name=\"$job_name\"" 

  check_can_start_job=false

fi



if [ "$check_can_start_job" = false ] && [ "$session_opened_by_me" = true ]
then

  $cis_base_dir/core/closesession
  unset session_id

  exit 1

fi  



job_dir="$cis_base_dir/jobs/${job_name}"

cd "$job_dir" || exit 1


last_build_dir="000000"

last_build_dir=$(find -name '[0123456789][0123456789][0123456789][0123456789][0123456789][0123456789]' -type d | sed s/".\/"// | sort | tail -1 )

build_dir="$(expr $last_build_dir + 1)"

if [ "$build_dir" -eq 1000000 ]
then

  build_dir="1"

fi


if [ "$build_dir" -lt 10 ] 
then

 build_dir="00000${build_dir}"

elif [ "$build_dir" -lt 100 ]
then

    build_dir="0000${build_dir}"

elif [ "$build_dir" -lt 1000 ] 
then

    build_dir="000${build_dir}"

elif [ "$build_dir" -lt 10000 ] 
then

    build_dir="00${build_dir}"

elif [ "$build_dir" -lt 100000 ] 
then

    build_dir="0${build_dir}"

fi

export build_number=$build_dir



if ! mkdir "$job_dir/$build_dir"
then

  $cis_base_dir/core/corelog "action=error_cant_mkdir_for_job_build job_name=\"$job_name\" build_dir=\"$build_dir\"" 
  $cis_base_dir/core/sessionlog "action=error_cant_mkdir_for_job_build job_name=\"$job_name\" build_dir=\"$build_dir\"" 

  if [ "$session_opened_by_me" = true ]
  then

    $cis_base_dir/core/closesession
    unset session_id

  fi  

  exit 1

fi

cd "$job_dir/$build_dir" || exit 1



if [ -r "$job_dir/params" ]
then

  declare -a parameters_names
  declare -a parameters_values

  while read -r str || [ -n "$str" ]
  do

    param_name=$(echo "$str" | awk -F "=" '{print $1}')

    if [ -z "$param_name" ]
    then
      continue
    fi

    parameters_names+=("$param_name")
    parameters_values+=("$(echo $str | awk -F '=' '{print $2}')")

  done <"$job_dir/params"


  for  index in "${!parameters_names[@]}"
  do

    param_name="${parameters_names[$index]}"

    if [ "$session_opened_by_me" = true ]
    then
  
      echo "Type param value for parameter $param_name (\"Enter\" for default value:\"${parameters_values[$index]}\")"
      read -r param_value 

      if [ -n "$param_value" ]
      then

        $cis_base_dir/core/setparam "$param_name" "$param_value"

      fi
    fi


    if [ -z "$($cis_base_dir/core/getparam $param_name)" ]
    then

      param_value=${parameters_values["$index"]}

      $cis_base_dir/core/setparam "$param_name" "$param_value"
      $cis_base_dir/core/sessionlog "action=set_call_param_to_default param_name=$param_name param_value=$param_value"

    fi

  done

fi



cp $job_dir/script .

$cis_base_dir/core/sessionlog "action=start_job job_name=$job_name build_dir=$build_dir pid=$$ ppid=$PPID"
echo "session_id=$session_id action=start_job job_name=$job_name build_dir=$build_dir pid=$$ ppid=$PPID"

echo "$session_id" >output.txt
echo "session_id=$session_id action=start_job job_name=$job_name build_dir=$build_dir pid=$$ ppid=$PPID" >>output.txt
echo "parent_job_name=$parent_job_name parent_job_build_number=$parent_job_build_number" >>output.txt

echo "$session_id" > ./session_id.txt

/bin/bash script >>output.txt 2>&1

res=$?

echo $res >exitcode.txt



echo "" >"$cis_base_dir/sessions/$session_id.prm"

$cis_base_dir/core/sessionlog "action=end_job job_name=$job_name build_dir=$build_dir exit_code=$res pid=$$ ppid=$PPID"



if [ "$session_opened_by_me" = true ]
then

  $cis_base_dir/core/closesession
  unset session_id

else 

  $cis_base_dir/core/setvalue "last_job_name" "$job_name"
  $cis_base_dir/core/setvalue "last_job_build_number" "$build_number"

fi

$cis_base_dir/core/maintenance 2>/dev/null & 

echo "Exit code: $res"
exit $res
